"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const rpc_websockets_1 = require("rpc-websockets");
const CONDUCTOR_CONFIG = '/_dna_connections.json';
exports.connect = (paramUrl) => new Promise(async (fulfill, reject) => {
    const url = paramUrl || await getUrlFromContainer().catch(() => reject('Could not auto-detect DNA interface from conductor. \
Ensure the web UI is hosted by a Holochain Conductor or manually specify url as parameter to connect'));
    const ws = new rpc_websockets_1.Client(url);
    ws.on('open', () => {
        const call = (...methodSegments) => (params) => {
            const method = methodSegments.length === 1 ? methodSegments[0] : methodSegments.join('/');
            return ws.call(method, params);
        };
        const callZome = (instanceId, zome, func) => (params) => {
            const callObject = {
                'instance_id': instanceId,
                zome,
                'function': func,
                params
            };
            return ws.call('call', callObject);
        };
        // define a function which will close the websocket connection
        const close = () => ws.close();
        fulfill({ call, callZome, close, ws });
    });
});
function getUrlFromContainer() {
    return fetch(CONDUCTOR_CONFIG)
        .then(data => data.json())
        .then(json => json.dna_interface.driver.port)
        .then(port => `ws://localhost:${port}`);
}
const holochainclient = { connect: exports.connect };
